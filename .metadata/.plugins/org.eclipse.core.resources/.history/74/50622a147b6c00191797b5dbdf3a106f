/*
 * Physics2D.cpp
 *
 *  Created on: Mar 1, 2018
 *      Author: sushil
 */


#include <Physics2D.h>
#include <Entity381.h>
#include <Utils.h>
#include <EntityMgr.h>
#include <UnitAI.h>
#include <InputMgr.h>

Physics2D::Physics2D(Entity381* ent):Aspect(ent){

}

Physics2D::~Physics2D(){

}


void Physics2D::Tick(float dt){
	if(!entity->mIsHat)
	{
		//first, get new speed from desired speed
		if(entity->desiredSpeed > entity->speed){
			entity->speed += entity->acceleration * dt;
		} else if (entity->desiredSpeed < entity->speed){
			entity->speed -= entity->acceleration * dt;
		}
		entity->speed = Clamp(entity->minSpeed, entity->maxSpeed, entity->speed);

		//close but no cigar. When I try to go from a heading of 350 to a heading of 10,
		//I should turn to right/starboard not keep decreasing heading till I get to 10 because it is 20 degrees from -10 (350) to +10 by turning to port/right and
		//340 degrees from 350 (-10) to 10 by turning left/port

		//now, get new heading from desired heading
		if(entity->desiredHeading > entity->heading){
			if(entity->desiredHeading - entity->heading > 180)
				entity->heading -= entity->turnRate * dt;
			else
				entity->heading += entity->turnRate * dt;
		} else if (entity->desiredHeading < entity->heading){
			if(entity->desiredHeading - entity->heading < -180)
				entity->heading += entity->turnRate * dt;
			else
				entity->heading -= entity->turnRate * dt;;
		}
		entity->heading = FixAngle(entity->heading);

		//Now do the trig
		entity->velocity.y = 0.0f; // just to be safe, we do not want ships in the air.
		entity->velocity.x = Ogre::Math::Cos(Ogre::Degree(entity->heading)) * entity->speed; //adjacent/hyp
		entity->velocity.z = Ogre::Math::Sin(Ogre::Degree(entity->heading)) * entity->speed; //opposite/hyp

		//This does not change!
		entity->position = entity->position + entity->velocity * dt;

		checkForCollisions(dt);
	}
	else
	{
		entity->position = entity->bodyForHat->position;
		entity->position.y += 10;
	}
}

void Physics2D::checkForCollisions(float dt)
{
	std::vector<Entity381*> ents = entity->engine->entityMgr->entities;

	collisionTimer -= dt;

	for(int i=0 ; i < ents.size() ; i++)
	{
		if((ents.at(i)->position != entity->position) && !(ents.at(i)->mIsHat))
		{
			if(Distance(ents.at(i)->position, entity->position) < (ents.at(i)->collisionRadius + entity->collisionRadius))
			{
				UnitAI* uaiThis = (UnitAI*) entity->aspects.at(1);
				UnitAI* uaiOther = (UnitAI*) ents.at(i)->aspects.at(1);

				Ogre::Vector3 worldPoint = Ogre::Vector3::ZERO;

				if(!uaiThis->commands.empty())
				{
					worldPoint = uaiThis->commands.front()->point;
					worldPoint.x *= -1;
					worldPoint.z *= -1;
					uaiThis->SetCommand("MOVETO", worldPoint, NULL);
				}
				else
				{
					entity->speed = 0;
				}




			}
		}
	}
}
