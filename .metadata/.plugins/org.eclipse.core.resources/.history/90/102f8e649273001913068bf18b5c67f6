/*
 * EntityMgr.cpp
 *
 *  Created on: Feb 7, 2018
 *      Author: sushil
 */

#include <EntityMgr.h>
#include <Engine.h>
#include <GfxMgr.h>

EntityMgr::EntityMgr(Engine *eng): Mgr(eng){
	selectedEntity = 0;
	count = 0;
	selectedEntityIndex = -1;
}

EntityMgr::~EntityMgr(){

}

void EntityMgr::CreateSpeedBoat(Ogre::Vector3 pos, bool isHat, Entity381* body, bool hasHat, bool stat){
	SpeedBoat *ent;
	if(!isHat)
		ent = new SpeedBoat(this->engine, "blueSkin_lightblueShirt.mesh", pos, count, isHat, body, hasHat);
	else
		ent = new SpeedBoat(this->engine, "blackHat.mesh", pos, count, isHat, body, hasHat);

	count++;
	entities.push_back((Entity381 *) ent);
}

void EntityMgr::SelectNextEntity(){
	if(selectedEntityIndex >= count - 1) {
		selectedEntityIndex = 0;
	} else {
		selectedEntityIndex++;
	}
	if(selectedEntity != 0)
		selectedEntity->isSelected = false;
	selectedEntity = entities[selectedEntityIndex];
	selectedEntity->isSelected = true;


}

void EntityMgr::SelectEntity(int id)
{
	selectedEntity->isSelected = false;
	selectedEntityIndex = id;

	entities[selectedEntityIndex]->isSelected = true;
	selectedEntity = entities[selectedEntityIndex];
}


void EntityMgr::CreateEntityOfTypeAtPosition(EntityTypes entType, Ogre::Vector3 pos, bool isHat, Entity381* body, bool hasHat, bool stat){

	CreateSpeedBoat(pos, isHat, body, hasHat, stat);

}

void EntityMgr::Tick(float dt){

	//check if any entities are colliding

	for(int i = 0; i < count; i++){
		entities[i]->Tick(dt);
	}
}

Entity381* EntityMgr::GetEntityAt(int id)
{
	return entities.at(id);
}

void EntityMgr::DestroyEntity(int index)
{
//	entities.at(index)->aspects.clear();

	entities.at(index)->destroyed = true;

//	entities.at(index)->sceneNode->removeAndDestroyAllChildren();
//	engine->gfxMgr->mSceneMgr->destroyMovableObject(entities.at(index)->ogreEntity);
//	engine->gfxMgr->mSceneMgr->destroySceneNode(entities.at(index)->sceneNode);
}
